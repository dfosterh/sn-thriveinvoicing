<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>task_time_worked</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>SetTEAttributesFromTask</name>
        <order>200</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
    var tsk = new GlideRecord('task');
	tsk.get(current.task);

	//on insert only
	if(!previous.sys_id) {
		//get latest journal entry to make sure it's at about the same time as this record creation
		var latestJournal = new GlideRecord('sys_journal_field');
		latestJournal.addQuery('element_id', tsk.sys_id);
		latestJournal.addQuery('element', 'work_notes');
		latestJournal.orderByDesc('sys_created_on');
		latestJournal.query();
		if(latestJournal.next()) {
			var c = new GlideDateTime(current.sys_created_on);
			var j = new GlideDateTime(latestJournal.sys_created_on);

			if(Math.abs(c.getNumericValue() - j.getNumericValue()) < 1000) {
				//getJournalEntry gets the record again, but formats it with user and time
				current.comments = tsk.work_notes.getJournalEntry(1);
				gs.addInfoMessage(gs.getMessage('Work Notes added to Time Entry'));
			}
		}
	}

	if (!current.x_175353_thriveinv_work_role) {
		current.x_175353_thriveinv_work_role = tsk.x_175353_thriveinv_work_role;
		//gs.addInfoMessage(gs.getMessage('Work Role added to Time Entry'));
	}
	
	if (!current.x_175353_thriveinv_work_type) {
		current.x_175353_thriveinv_work_type = tsk.x_175353_thriveinv_work_type;
		//gs.addInfoMessage(gs.getMessage('Work Type added to Time Entry'));
	}
	
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-08-13 19:50:04</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>d10db9134ff313002e7e8020a310c7b5</sys_id>
        <sys_mod_count>28</sys_mod_count>
        <sys_name>SetTEAttributesFromTask</sys_name>
        <sys_overrides/>
        <sys_package display_value="ThriveInvoicing" source="x_175353_thriveinv">d742b9934f3313002e7e8020a310c7e3</sys_package>
        <sys_policy/>
        <sys_scope display_value="ThriveInvoicing">d742b9934f3313002e7e8020a310c7e3</sys_scope>
        <sys_update_name>sys_script_d10db9134ff313002e7e8020a310c7b5</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-08-17 21:00:19</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=d10db9134ff313002e7e8020a310c7b5"/>
</record_update>
